<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ian's Tech Note]]></title>
  <link href="http://iandai.github.io/atom.xml" rel="self"/>
  <link href="http://iandai.github.io/"/>
  <updated>2015-02-01T01:21:35+09:00</updated>
  <id>http://iandai.github.io/</id>
  <author>
    <name><![CDATA[Ian Dai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using iOS Google Maps SDK]]></title>
    <link href="http://iandai.github.io/blog/2015/01/22/using-ios-google-maps-sdk/"/>
    <updated>2015-01-22T20:10:37+09:00</updated>
    <id>http://iandai.github.io/blog/2015/01/22/using-ios-google-maps-sdk</id>
    <content type="html"><![CDATA[<h2>Steps</h2>

<ol>
<li>Apply Google Map Api Key</li>
<li>Import GoogleMaps.bundle in GoogleMaps.framework</li>
<li>In <code>Other Linker Flags</code> section, add <code>-ObjC</code></li>
<li><p>In <code>AppDelegate</code> .</p>

<pre><code class="`sh"> #import &lt;GoogleMaps/GoogleMaps.h&gt;
 - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
 {
     [GMSServices provideAPIKey:@"API_KEY"];
     return YES;
 }
</code></pre></li>
</ol>


<h2>Possible issues</h2>

<ol>
<li>In 2nd step, use GoogleMaps.bundle in GoogleMaps.framework, instead of use GoogleMaps.framework</li>
<li>In 3rd step, use <code>-ObjC</code> will have conflict with other framework such as Parse&rsquo;s framework. The solution is to add following:
 <code>sh
 -force_load $(PROJECT_DIR)/GoogleMaps.framework/GoogleMaps
</code></li>
<li><p>Delay when load maps. When user click to access maps view, app will fetch location data from server. This process takes time and map will have a moment stop at the position of starting position. This will confuse user and thought maps is not working properly.
Solution is to preload data that is near the really location, so google maps will do the animation. Since the animation will take a while, during which time, another thread will fetch the data and then show the correct location.</p>

<pre><code class="``">  - (void)viewDidLoad
  {
      [super viewDidLoad];
      CGPoint center = CGPointMake(44.209769, -69.0648919);
      GMSCameraPosition *camera = [GMSCameraPosition cameraWithLatitude:center.x
                                                          longitude:center.y
                                                               zoom:15.5];
      self.mapView.camera = camera;
  }
</code></pre></li>
<li><p>Use google maps in a subview.<br/>
Following Code will not work in a subview.</p>

<pre><code class="``">  #import "YourViewController.h"
  #import &lt;GoogleMaps/GoogleMaps.h&gt;

  @implementation YourViewController {
      GMSMapView *mapView_;
  }

  - (void)viewDidLoad {
      // Create a GMSCameraPosition that tells the map to display the
      // coordinate -33.86,151.20 at zoom level 6.
      GMSCameraPosition *camera = [GMSCameraPosition cameraWithLatitude:-33.86
                                                        longitude:151.20
                                                             zoom:6];
      mapView_ = [GMSMapView mapWithFrame:CGRectZero camera:camera];
      mapView_.myLocationEnabled = YES;
      self.view = mapView_;

      // Creates a marker in the center of the map.
      GMSMarker *marker = [[GMSMarker alloc] init];
      marker.position = CLLocationCoordinate2DMake(-33.86, 151.20);
      marker.title = @"Sydney";
      marker.snippet = @"Australia";
      marker.map = mapView_;
      }
  @end
</code></pre>

<p>Chnage the existing Xib&rsquo;s class into GSMMapView will solve the problem.</p>

<pre><code class="``">  @property (weak, nonatomic) IBOutlet GMSMapView *mapView;

  CGPoint center = CGPointMake(44.209769, -69.0648919);
  GMSCameraPosition *camera = [GMSCameraPosition cameraWithLatitude:center.x
                                                          longitude:center.y
                                                               zoom:15.5];
  self.mapView.camera = camera;

  GMSMarker *marker = [[GMSMarker alloc] init];
  marker.position = CLLocationCoordinate2DMake(-33.86, 151.20);
  marker.title = @"Sydney";
  marker.snippet = @"Australia";
  marker.icon = [UIImage imageNamed:@"map_pin_icon"];
  marker.map = self.mapView;
</code></pre></li>
</ol>


<h2>Reference</h2>

<ul>
<li><a href="http://stackoverflow.com/questions/15417811/cannot-put-a-google-maps-gmsmapview-in-a-subview-of-main-main-view">Add google maps in a subview</a></li>
<li><a href="http://dev.classmethod.jp/smartphone/iphone/ios-map-programming-series-1/">Customise GMSMarker</a></li>
<li><a href="http://stackoverflow.com/questions/16706587/can-i-link-googlemaps-sdk-for-ios-with-a-linker-flag-other-than-objc">Other Linker Flags Conflict</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cache Expiration]]></title>
    <link href="http://iandai.github.io/blog/2014/07/08/cache-expiration/"/>
    <updated>2014-07-08T18:46:10+09:00</updated>
    <id>http://iandai.github.io/blog/2014/07/08/cache-expiration</id>
    <content type="html"><![CDATA[<h2>Cache过期</h2>

<ul>
<li><p>Key Based Cache Expiration<br/>
  优点：
      降低耦合性和代码复杂度，只需要在自己的函数／方法中修改代码即可。
  缺点：
      适用于cache对应的记录有update_at字段。（Category整体没有update_at的时间记录，就没法使用该方法）
      每次查询，都需要首先查询update_at字段。</p></li>
<li><p>ORM模型回调接口删除cache（after_save, before_destroy, etc)<br/>
  优点：
      快。
  缺点：
      增加一定的代码复杂度。
      若不是ORM模型的代码，需要手动添加回调接口。</p></li>
<li><p>在代码中增加删除cache的代码<br/>
  优点：
      无。
  缺点：
      增加代码复杂度。      <br/>
      如果model层接口太多，大多数代码都是直接用sql语句存取，导致需要删除cache的函数太多，代码耦合度和复杂度都大大增加。</p></li>
</ul>


<h2>参考文献</h2>

<p><a href="http://octopress.org/docs/">octopress docs</a><br/>
<a href="http://stackoverflow.com/editing-help">stackoverflow markdown help</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injection]]></title>
    <link href="http://iandai.github.io/blog/2014/05/01/sql-injection/"/>
    <updated>2014-05-01T18:41:00+09:00</updated>
    <id>http://iandai.github.io/blog/2014/05/01/sql-injection</id>
    <content type="html"><![CDATA[<h2>SQL 注入方法</h2>

<ul>
<li><p>SQL 扫描工具<br/>
  sqlmap  <a href="https://github.com/sqlmapproject/sqlmap/wiki/Screenshots">https://github.com/sqlmapproject/sqlmap/wiki/Screenshots</a></p></li>
<li><p>SQL injection方法<br/>
1 ‘ or 1 = 1 —<br/>
2 select * from xxx where a = ‘123;  输入非法内容，看是否有sql error返回。</p></li>
<li><p>利用漏洞<br/>
ereg()有bug，无法检测到\0之后的内容，有可能将注入的内容隐藏在\0的后面。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s2">&quot;123</span><span class="se">\0\0</span><span class="s2">abc&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;source=[</span><span class="si">$a</span><span class="s2">]</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$r</span> <span class="o">=</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s2">&quot;/123/&quot;</span><span class="p">,</span> <span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;match=[</span><span class="si">$r</span><span class="s2">]</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$r</span> <span class="o">=</span> <span class="nb">preg_match</span><span class="p">(</span><span class="s2">&quot;/abc/&quot;</span><span class="p">,</span> <span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;match=[</span><span class="si">$r</span><span class="s2">]</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$r</span> <span class="o">=</span> <span class="nb">ereg</span><span class="p">(</span><span class="s2">&quot;123&quot;</span><span class="p">,</span> <span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;match=[</span><span class="si">$r</span><span class="s2">]</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$r</span> <span class="o">=</span> <span class="nb">ereg</span><span class="p">(</span><span class="s2">&quot;abc&quot;</span><span class="p">,</span> <span class="nv">$a</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;match=[</span><span class="si">$r</span><span class="s2">]</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">/// ereg cannot detect &quot;abc&quot; after &quot;\0&quot;, so you must not use raw source string!</span>
</span><span class='line'><span class="c1">/// and you should not use ereg(). instead of it, use preg_match().</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SQL注入的对策</h2>

<ul>
<li><p>输入<br/>
1 不要信任用户的输入，包括cookie。对用户的输入进行校验。如果是数字，就转化为数字，而不是字符类型的数字。<br/>
2 不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</p></li>
<li><p>权限<br/>
1 不要使用有超级用户或其它有权创建新用户的数据库帐号来连接数据库，攻击者可以在数据库中新建一个超级用户。为每个应用使用单独的权限有限的数据库连接。<br/>
2 删除不再需要的存储过程，例如：master..Xp_cmdshell, xp_startmail, xp_sendmail, sp_makewebtask.</p></li>
<li><p>其他<br/>
1 不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。<br/>
2 应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装。</p></li>
</ul>


<h3>参考链接</h3>

<p><a href="http://www.php.net/manual/zh/security.database.sql-injection.php">PHP官方手册对策</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP的SQL注入防止CheatSheet</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS NOTES]]></title>
    <link href="http://iandai.github.io/blog/2014/04/08/css-notes/"/>
    <updated>2014-04-08T17:47:00+09:00</updated>
    <id>http://iandai.github.io/blog/2014/04/08/css-notes</id>
    <content type="html"><![CDATA[<h4>Tips</h4>

<p>zen coding快捷键<code>command+e</code><br/>
CSS布局技术都依赖于三个基本概念：定位，浮动和空白边(margin).<br/>
Link css: <code>&lt;link rel="stylesheet" href="…." /&gt;</code>, rel stands for relation.<br/>
inline box 不响应垂直margin, width, height, max/min width/height 等属性声明；block box 则可以响应这些属性。</p>

<h4>CSS使用原则</h4>

<p>前端的素养：注意各个元素之间的对齐方式。<br/>
html是用来标记这段内容是在做社么，而不是用来stlying的。<br/>
所以，table tag不用来表示styling画方框，而只是用来显示数据表格。</p>

<h4>font-family属性</h4>

<p>font-family: Verdana, Arial，sans-serif<br/>
浏览器会依次调用各个字体，直到系统装有该字体。 sans-serif为通用字体族，多数系统都装有该字体族中间的字体。<br/>
sans-serif代表无衬线体，与中文的黑体相对应.<br/>
Referance: <a href="http://zh.wikipedia.org/wiki/%E6%97%A0%E8%A1%AC%E7%BA%BF%E4%BD%93.">http://zh.wikipedia.org/wiki/%E6%97%A0%E8%A1%AC%E7%BA%BF%E4%BD%93.</a></p>

<h4>图片格式</h4>

<p>html使用的图片格式：普通图片使用jpeg，如果需要背景为透明，就必须使用png-24。</p>

<h4>normalize.css</h4>

<p>解决各种浏览器初始状态的不同和兼容问题<br/>
<a href="https://github.com/necolas/normalize.css">https://github.com/necolas/normalize.css</a></p>

<h4>HTML img标签的alt属性</h4>

<p>alt属性是一个必需的属性，它规定在图像无法显示时的替代文本.<br/>
alt stands for alternative text.</p>

<h4>使得竖着的list变成横向的navigation list方法</h4>

<p>添加display: inline;<br/>
Referance: <a href="https://tutsplus.com/lesson/navigation-lists/">https://tutsplus.com/lesson/navigation-lists/</a></p>

<h4>postion: relative和absolute定位 （相对定位和绝对定位）</h4>

<p>相对定位是“相对于”元素在文档流中的初始位置，而绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么是最初的包含块。<br/>
相对定位在移动位置之后，不会影响其他文档流中元素的位置。<br/>
绝对定位在移动位置之后，元素从文档流中抽取出来，原占有的位置被后面的对象顶替上来。</p>

<p>position: absolute 会使得原来的inline元素变成block元素，从而能够使用width属性。</p>

<h4>居中</h4>

<p>水平居中(：margin和width同时使用的时候，才会有居中效果。<br/>
垂直居中(1)：vertical-align:middle;<br/>
line-height: 10px;   /<em> must define line-height to use vertical-align </em>/    <br/>
line-height: 100%;   等于font-size的高度，而不是div的高度<br/>
垂直居中(2)：padding:25px;  上下padding相等，则自动会垂直居中了</p>

<h4>奇怪的inline-block</h4>

<p>对li使用inline-block的时候，li之间存在space，即使把margin和padding都设置为0，依然无法消除。<br/>
问题的本质是两个li之间的space问题。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;li&gt;1&lt;/li&gt;
</span><span class='line'>&lt;li&gt;2&lt;/li&gt;</span></code></pre></td></tr></table></div></figure>


<p>space占有4px的空间，所以无法被消除。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;</span></code></pre></td></tr></table></div></figure>


<p>按照这种方式排列html，中间的space就会消失。<br/>
另一种方法是将 ul tag 的字体大小设置为0，然后把li tag中的font-size设置回来。<br/>
Referance: <a href="http://stackoverflow.com/questions/5256533/a-space-between-inline-block-list-items">http://stackoverflow.com/questions/5256533/a-space-between-inline-block-list-items</a></p>

<h4>Margin的垂直collapse（Collapsing margins）</h4>

<p>Horizontal margins never collapse.<br/>
定义： the expression collapsing margins means that adjoining margins (no non-empty content, padding or border areas or clearance separate them) of two or more boxes (which may be next to one another or nested) combine to form a single margin.<br/>
两种情况：<br/>
1. 对于上下两个并列的div块而言，上面div的margin-bottom和下面div的margin-top会塌陷，也就是会取上下两者margin里最大值作为显示值。<br/>
2. 对于有块级子元素的元素计算高度的方式,如果元素没有垂直边框和填充,那其高度就是其子元素顶部和底部边框边缘之间的距离。<br/>
Referance：<br/>
CSS的margin塌陷（collapse） <a href="http://blog.csdn.net/dclchj/article/details/9787481  ">http://blog.csdn.net/dclchj/article/details/9787481  </a>
Box model 8.3.1   <a href="http://www.w3.org/TR/CSS2/box.html">http://www.w3.org/TR/CSS2/box.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Port Forward/Tunnel]]></title>
    <link href="http://iandai.github.io/blog/2014/03/18/port-forward-slash-tunnel/"/>
    <updated>2014-03-18T13:38:00+09:00</updated>
    <id>http://iandai.github.io/blog/2014/03/18/port-forward-slash-tunnel</id>
    <content type="html"><![CDATA[<h3>Agent Forwarding</h3>

<p>A - B - C 在从A访问C过程中经过B，但是不用在B上安装私钥，叫做Agent Forwarding</p>

<p>We have also seen another type of SSH forwarding, agent forwarding. [Section 6.3.5] This let us
create SSH connections from one computer, through a second computer, and onto a third using
public-key authentication, but without installing our private key on the second machine.</p>

<h3>Port Forwarding, also names as tunneliing</h3>

<p>A - B 之间使用例如TCP/IP这种不安全的协议的时候，在TCP/IP协议之中，增加一个安全的通道</p>

<p>Port forwarding is sometimes called tunneling because the SSH connection provides a secure &ldquo;tunnel&rdquo; through which another TCP/IP connection may pass.
SSH uses TCP/IP as its transport mechanism, usually TCP port 22 on the server machine, as it encrypts and decrypts the traffic passing over the connection.</p>

<h3>Local Port Forwarding and Remote Port Forwarding</h3>

<p>Local Port Forwarding—In most cases, local port forwarding is used to forward data securely from another
client application running on the same computer as the Secure Shell client. The Secure Shell client is
configured to redirect data from a specified local port (on the same computer as the Secure Shell client),
through the secure tunnel to a specified destination host and port. You can configure any other client
running on the same computer to connect to the forwarded port (rather than directly to the destination
host and port). After the Secure Shell connection is established, the Secure Shell client listens on the
specified port and redirects all data sent to that port through the secure tunnel to the Secure Shell
server. The server decrypts the data, and then directs it to the destination host and port.</p>

<p>Remote Port Forwarding—Remote port forwarding is used to forward data securely from any client
application running on the same computer as the Secure Shell server. In this case, the client session
requests that a specified remote port (on the same computer as the Secure Shell server) be used to
redirect the data. You can configure any other client running on the same computer as the Secure Shell
server to connect to the forwarded port (rather than directly to the destination host and port). After the
Secure Shell connection is established, the Secure Shell server listens on the specified port and redirects
all data sent to that port through the secure tunnel to the Secure Shell client. The client decrypts the
data and then directs it to the destination host and port.</p>

<h3>多阶段Port Forwarding/Tunnelling</h3>

<p><a href="http://superuser.com/questions/96489/ssh-tunnel-via-multiple-hops">http://superuser.com/questions/96489/ssh-tunnel-via-multiple-hops</a></p>

<h6>参考文献</h6>

<p><a href="http://www.amazon.com/SSH-The-Secure-Shell-Definitive/dp/0596008953">SSH, The Secure Shell - The Definitive Guide | Chapter Port Forwarding and X Forwarding</a></br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec Test Principle - Test Only Your Own Code]]></title>
    <link href="http://iandai.github.io/blog/2014/02/27/rspec-test-principle-test-only-your-own-code/"/>
    <updated>2014-02-27T20:47:00+09:00</updated>
    <id>http://iandai.github.io/blog/2014/02/27/rspec-test-principle-test-only-your-own-code</id>
    <content type="html"><![CDATA[<p>测试的时候，这一点常常被忘记，那就是———只测试自己的代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">S3Bucket</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">config_file</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;.....&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;access_key_id&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;access_key_id&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;secret_access_key&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;secret_access_key&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;bucket_name&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;bucket_name&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;initialize s3 bucket&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">s3b</span> <span class="o">=</span> <span class="no">S3Bucket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">s3b</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">S3Bucket</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;initialize s3 bucket with wrong access_key_id&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@config</span><span class="o">[</span><span class="s2">&quot;access_key_id&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@config</span><span class="o">[</span><span class="s2">&quot;access_key_id&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="n">expect</span> <span class="p">{</span> <span class="no">S3Bucket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;AWS Access Key Id does not exist in our records.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;upload file to s3&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">s3b</span> <span class="o">=</span> <span class="no">S3Bucket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public_url</span> <span class="o">=</span> <span class="n">s3b</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="s2">/s3.yml&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">public_url</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">URI</span><span class="o">::</span><span class="no">HTTPS</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面这段代码，测试上传文件到Amazon S3的代码。这段代码的问题是，它依赖于S3的服务是可行的，而且它其实更多的是在测试S3 SDK。
比如它测试了access key id出错的时候，会抛出ArgumentError。但是抛出ArgumentError的是S3的SDK，而不是S3Bucket类中的代码，所以这个测试其实是不必要的。</p>

<p>在测试这类测试的时候，可以使用rspec-mocks来进行测试。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">S3Bucket</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@file_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span><span class="si">}</span><span class="s2">/../../../test.txt&quot;</span>
</span><span class='line'>    <span class="n">config_file</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;.....&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;access_key_id&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;access_key_id&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;secret_access_key&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;secret_access_key&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;bucket_name&quot;</span> <span class="o">=&gt;</span> <span class="n">config_file</span><span class="o">[</span><span class="s2">&quot;s3&quot;</span><span class="o">][</span><span class="s2">&quot;bucket_name&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>    <span class="c1"># AWS::S3 class should response to :new method</span>
</span><span class='line'>    <span class="n">s3</span> <span class="o">=</span> <span class="n">an_instance_of</span><span class="p">(</span><span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="p">)</span>
</span><span class='line'>    <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="vi">@config</span><span class="o">[</span><span class="s2">&quot;access_key_id&quot;</span><span class="o">]</span><span class="p">,</span> <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="vi">@config</span><span class="o">[</span><span class="s2">&quot;secret_access_key&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">s3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># build bucket object</span>
</span><span class='line'>    <span class="n">bucket</span> <span class="o">=</span> <span class="n">an_instance_of</span><span class="p">(</span><span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Bucket</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s3</span><span class="o">.</span><span class="n">stub_chain</span><span class="p">(</span><span class="ss">:buckets</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">bucket</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># build s3 object with method upload and delete</span>
</span><span class='line'>    <span class="n">s3_obj</span> <span class="o">=</span> <span class="n">an_instance_of</span><span class="p">(</span><span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bucket</span><span class="o">.</span><span class="n">stub_chain</span><span class="p">(</span><span class="ss">:objects</span><span class="p">,</span> <span class="ss">:[]</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="n">s3_obj</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s3_obj</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:write</span><span class="p">)</span><span class="o">.</span><span class="n">with</span><span class="p">(</span><span class="ss">:file</span> <span class="o">=&gt;</span> <span class="vi">@file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@test_url</span> <span class="o">=</span> <span class="no">URI</span><span class="o">::</span><span class="no">HTTPS</span><span class="o">.</span><span class="n">build</span><span class="p">({</span><span class="ss">:host</span> <span class="o">=&gt;</span> <span class="s1">&#39;www.example.com&#39;</span><span class="p">,</span> <span class="ss">:path</span> <span class="o">=&gt;</span> <span class="s1">&#39;/foo/bar&#39;</span><span class="p">})</span>
</span><span class='line'>    <span class="n">s3_obj</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:public_url</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="vi">@test_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;initialize s3 bucket with &quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">s3b</span> <span class="o">=</span> <span class="no">S3Bucket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">s3b</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">be_an_instance_of</span><span class="p">(</span><span class="no">S3Bucket</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;upload file to s3&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">s3b</span> <span class="o">=</span> <span class="no">S3Bucket</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@config</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public_url</span> <span class="o">=</span> <span class="n">s3b</span><span class="o">.</span><span class="n">upload</span><span class="p">(</span><span class="vi">@file_path</span><span class="p">)</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="n">public_url</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="vi">@test_url</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，对访问S3的代码mock，从而不需要进行网络访问便测试了S3Bucket类中的代码。</p>

<h6>参考</h6>

<p><a href="https://github.com/rspec/rspec-expectations">Rspec Expectations</a></br>
<a href="http://betterspecs.org/">BetterSpec</a></br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Server on MacOS Using .htaccess]]></title>
    <link href="http://iandai.github.io/blog/2013/12/04/apache-server-on-macos-using-htaccess/"/>
    <updated>2013-12-04T15:49:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/12/04/apache-server-on-macos-using-htaccess</id>
    <content type="html"><![CDATA[<h3>检测Apache是否支持mod_rewrite</h3>

<p>在httpd.conf文件中的Loaded Modules，是否包含了mod_rewrite模块；如果没有的话，去除这部分的注释。</p>

<h3>让apache服务器支持.htaccess</h3>

<p>在httpd.conf中的DocumentRoot的Directory中，AllowOverride修改为All。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory "/Library/WebServer/Documents"&gt;
</span><span class='line'>    Options Indexes FollowSymLinks MultiViews
</span><span class='line'>    AllowOverride None
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Directory "/Library/WebServer/Documents"&gt;
</span><span class='line'>    Options Indexes FollowSymLinks MultiViews
</span><span class='line'>    AllowOverride All
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<h3>在/Library/WebServer/Documents中建立.htaccess 文件</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RewriteEngine on
</span><span class='line'>RewriteRule ([a-zA-Z]{1,})-([0-9]{1,}).html$ index.php?action=$1&id=$2</span></code></pre></td></tr></table></div></figure>


<p>建立index.php文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">‘你的Action是：’</span> <span class="o">.</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;action&#39;</span><span class="p">];</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">‘</span><span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span><span class="nx">’</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="nx">‘你的ID是：’</span> <span class="o">.</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">];</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">在浏览器中输入：localhost</span><span class="o">/</span><span class="nx">view</span><span class="o">-</span><span class="mf">12.</span><span class="nx">html</span>
</span><span class='line'><span class="nx">输出的是：</span>
</span><span class='line'><span class="nx">你的Action是：view</span>
</span><span class='line'><span class="nx">你的ID是：12</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Referance</h3>

<p><a href="http://httpd.apache.org/docs/current/howto/htaccess.html">Apache htaccess doc</a></br>
<a href="http://blog.csdn.net/Yuhao818/article/details/4680075">Apache htaccess tutorial</a></br>
<a href="http://httpd.apache.org/docs/current/mod/mod_rewrite.html">Apache mod_rewirte doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Server on MacOS Using Alias]]></title>
    <link href="http://iandai.github.io/blog/2013/12/04/apache-server-on-macos-using-alias/"/>
    <updated>2013-12-04T15:48:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/12/04/apache-server-on-macos-using-alias</id>
    <content type="html"><![CDATA[<ul>
<li>检查httpd服务是否在运行，不存在的话需要启动.</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo lsof -iTCP:80 -sTCP:LISTEN  -&gt; 必须使用sudo，这样才能查看root用户和_www用户运行中的文件
</span><span class='line'>sudo apachectl start
</span><span class='line'>
</span><span class='line'>MacOS  apache path（http://wiki.apache.org/httpd/DistrosDefaultLayout）
</span><span class='line'>ServerRoot              ::      /usr
</span><span class='line'>Primary Config Fle      ::      /etc/apache2/httpd.conf
</span><span class='line'>DocumentRoot            ::      /Library/WebServer/Documents
</span><span class='line'>ErrorLog                ::      /var/log/apache2/error_log
</span><span class='line'>AccessLog               ::      /var/log/apache2/access_log
</span><span class='line'>cgi-bin                 ::      /Library/WebServer/CGI-Executables (empty by default)
</span><span class='line'>binary                  ::      /usr/sbin/httpd
</span><span class='line'>start/stop              ::      /usr/sbin/     (start|stop|restart|fullstatus|status|graceful|graceful-stop|configtest|help)</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>在Users/g_dai/codes/site文件夹中建立project，创建文件1.html，并写入内容Hello world.</p></li>
<li><p>在DocumentRoot /Library/WebServer/Documents中创建文件夹docs.</p></li>
<li><p>在httpd.conf中写入，注意/docs 后面没有slash.</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Alias /docs Users/g_dai/codes/site
</span><span class='line'>&lt;Directory Users/g_dai/codes/site&gt; (保证这个folder可以被apache访问）
</span><span class='line'>    Order allow,deny
</span><span class='line'>    Allow from all
</span><span class='line'>&lt;/Directory&gt;</span></code></pre></td></tr></table></div></figure>


<h4>Referance</h4>

<p><a href="http://httpd.apache.org/docs/2.2/mod/mod_alias.html">Apache mod_alias</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Ruby CGI Scripts With Apache]]></title>
    <link href="http://iandai.github.io/blog/2013/11/15/run-ruby-cgi-scripts-with-apache/"/>
    <updated>2013-11-15T19:34:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/15/run-ruby-cgi-scripts-with-apache</id>
    <content type="html"><![CDATA[<h2>CGI Scripts on server</h2>

<p>启动httpd service, 在/var/www/cgi-bin文件夹下，创建ruby.cgi文件，将其权限设置为可执行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #!/bin/env ruby
</span><span class='line'> print "Content-type: text/html\r\n\r\n"
</span><span class='line'> print "&lt;html&gt;&lt;body&gt;Hello World! It's #{Time.now}&lt;/body&gt;&lt;/html&gt;\r\n"</span></code></pre></td></tr></table></div></figure>


<p>访问<a href="http://host/cgi-bin/ruby.cgi%E5%8F%AF%E4%BB%A5%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E7%9A%84%E6%97%B6%E9%97%B4%E3%80%82">http://host/cgi-bin/ruby.cgi%E5%8F%AF%E4%BB%A5%E6%AD%A3%E7%A1%AE%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E7%9A%84%E6%97%B6%E9%97%B4%E3%80%82</a></p>

<p>CGI 设置的要点：<br/>
The CGI script must have a shebang line that indicates which program will execute the script. (i.e., /usr/local/bin/ruby).<br/>
The MIME media type must be the first output of your CGI script.<br/>
A blank line follows the MIME media type.<br/>
The CGI script must have the correct permissions.</p>

<p><a href="http://hackingthevalley.com/ccsf/ruby_cgi_scripts">Detailed ruby cgi tutorial</a><br/>
<a href="http://stackoverflow.com/questions/560749/how-do-i-configure-apache2-to-run-perl-cgi-scripts">Typical CGI errors</a></p>

<h2>Config apache to support running CGI</h2>

<p>简单地方法，是将文件放入/var/www/cgi-bin文件夹下；复杂的方法参考<a href="http://httpd.apache.org/docs/2.2/howto/cgi.html">apache官方的文档</a></p>

<h2>Send parameters with get and post in ruby on client</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">host</span> <span class="o">=</span> <span class="s2">&quot;….&quot;</span>       <span class="c1">#*******.ap-northeast-1.compute.amazonaws.com</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'>
</span><span class='line'><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">version_1_2</span>
</span><span class='line'><span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>  <span class="n">response</span> <span class="o">=</span> <span class="n">http</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&quot;/cgi-bin/ruby.cgi?first_name=ZARA&amp;last_name=ALI&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Get request&#39;s parameters: </span><span class="si">#{</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="si">}</span><span class="s2"> &quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">net</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;doris&#39;</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s1">&#39;doris@foo.com&#39;</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'> <span class="c1"># Create HTTP request</span>
</span><span class='line'><span class="n">req</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">::</span><span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span> <span class="s1">&#39;/cgi-bin/ruby.cgi&#39;</span><span class="p">,</span> <span class="p">{}</span> <span class="p">)</span>
</span><span class='line'><span class="n">req</span><span class="o">.</span><span class="n">set_form_data</span> <span class="n">params</span>
</span><span class='line'>
</span><span class='line'> <span class="c1"># Send request</span>
</span><span class='line'><span class="n">response</span> <span class="o">=</span> <span class="n">net</span><span class="o">.</span><span class="n">start</span> <span class="k">do</span> <span class="o">|</span><span class="n">http</span><span class="o">|</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">read_timeout</span> <span class="o">=</span> <span class="mi">5600</span>
</span><span class='line'>  <span class="n">http</span><span class="o">.</span><span class="n">request</span> <span class="n">req</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Post request&#39;s parameters: </span><span class="si">#{</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="si">}</span><span class="s2"> &quot;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby File Flock]]></title>
    <link href="http://iandai.github.io/blog/2013/11/15/ruby-file-flock/"/>
    <updated>2013-11-15T19:25:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/15/ruby-file-flock</id>
    <content type="html"><![CDATA[<ul>
<li>在多线程的环境中，flock可lock文件独占使用。</li>
</ul>


<p>运行前文件1.txt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a
</span><span class='line'>b</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;1.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;r+&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">fp</span><span class="o">|</span>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">flock</span><span class="p">(</span><span class="no">File</span><span class="o">::</span><span class="no">LOCK_EX</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">file_str</span> <span class="o">=</span> <span class="n">fp</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>    <span class="n">arr</span> <span class="o">=</span> <span class="n">file_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">file_str</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;b&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>    <span class="n">file_str</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">rewind</span>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">file_str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fp</span><span class="o">.</span><span class="n">flock</span><span class="p">(</span><span class="no">File</span><span class="o">::</span><span class="no">LOCK_UN</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后文件1.txt</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">b</span>
</span><span class='line'><span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crontab(1):Basic Usage]]></title>
    <link href="http://iandai.github.io/blog/2013/11/08/crontab-1-basic-usage/"/>
    <updated>2013-11-08T19:04:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/08/crontab-1-basic-usage</id>
    <content type="html"><![CDATA[<h2>Ways to use crontab</h2>

<ul>
<li>crobtab -e  当前用户环境下运行的cron</li>
<li>sudo vi /etc/crontab    在系统环境下运行的cron，所有用户都可以使用</li>
<li>/etc/cron.d/  将文件放在该目录下，系统则会自动运行</li>
</ul>


<h2>Example: backup mysql every day</h2>

<ul>
<li><p>step1</p>

<p>创建保存备份文件的路径/mysqldata </br>
<code>
  mkdir /var/www/mysqldata
 </code></p></li>
<li><p>step2</p>

<p>创建/usr/sbin/bakmysql文件,写入以下代码 </br>
<code>
  /usr/bin/mysqldump production -u root -p password | gzip -c | cat &gt; /var/www/mysqldata/production$(date +\%Y-\%m-\%d-\%H.\%M.\%S).sql.gz &gt;/dev/null 2&gt;&amp;1
</code>
  注意：</br>
  1）备份数据库mysqldump必须要完整路径！！！！</br>
  2）date后面的％前必须加\，因为在crontab中％代表new line 。所以最好的方式是在crontab里运行一个脚本，然后在脚本里加上Path。</p></li>
<li><p>step 3</p>

<p>  修改文件属性，使其可执行</br>
<code>
  chmod +x /usr/sbin/bakmysql
</code></p></li>
<li><p>step 4</p>

<p>修改crontab -e,下面添加一下代码,每天3点钟执行备份</br>
  <code>
  01 3 * * * root /usr/sbin/bakmysql &gt;&gt; /dev/null 2&gt;&amp;1 （&gt;&gt; /dev/null 2&gt;&amp;1 用于防止log过多）
 </code></p></li>
<li><p>step 5</p>

<p>每天你在/var/www/mysqldata可以看到这样的文件mysql20040619.tar.gz</p></li>
<li><p>step 6</p>

<p>  远程复制到桌面
  <code>
  scp g_dai@ip:/var/www/mysqldata/sqldata2013-01-29-15.06.22.sql.gz ~/Desktop/
</code></p></li>
<li><p>step 7</p>

<p>  从桌面import到mysql
  <code>
mysql -u root -p
show databases;
source ~/Desktop/sqldata2013-01-29-15.06.22.sql
</code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crontab(2):环境变量 Environment Variables]]></title>
    <link href="http://iandai.github.io/blog/2013/11/08/crontab/"/>
    <updated>2013-11-08T18:04:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/08/crontab</id>
    <content type="html"><![CDATA[<h2>导出crontab的环境变量</h2>

<p>Add this to your cron:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>30 08 * * * env &gt; ~/cronenv</span></code></pre></td></tr></table></div></figure>


<h2>在bash中加载crontab的环境变量</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>env - `cat ~/cronenv` /bin/sh</span></code></pre></td></tr></table></div></figure>


<h2>在crontab中添加UTF-8 encoding环境变量</h2>

<p>在crontab -e中所有需要运行的shell command前面添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>LANG=en_US.UTF-8
</span><span class='line'>30 09 * * * /home/convertor/.rvm/rubies/ruby-1.9.3-p429/bin/ruby /home/convertor/bv_data_converter/lib/backup_remider.rb</span></code></pre></td></tr></table></div></figure>


<h2>Crontab中加载rvm环境</h2>

<p><a href="http://rvm.io/integration/cron">Load rvm in crontab</a></p>

<h2>Crontab的运行log</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo tail /var/log/cron </span></code></pre></td></tr></table></div></figure>


<h6>参考文献</h6>

<p><a href="http://stackoverflow.com/questions/2135478/how-to-simulate-the-environment-cron-executes-a-script-with">How to simulate the environment cron executes a script with</a></br>
<a href="http://stackoverflow.com/questions/2229825/where-can-i-set-environment-variables-that-crontab-will-use">Set environment variables in crontab</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Signal]]></title>
    <link href="http://iandai.github.io/blog/2013/11/07/ruby-signal/"/>
    <updated>2013-11-07T18:40:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/07/ruby-signal</id>
    <content type="html"><![CDATA[<h2>简单处理signal的例子</h2>

<ul>
<li>signal_test.rb文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;INT&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Quitting on INT signal.&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;QUIT&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Quitting on QUIT signal.&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;TERM&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;U teminated me!&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>运行一下命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Press</span> <span class="n">ctrl</span> <span class="o">+</span> <span class="n">c</span>
</span><span class='line'><span class="n">mac</span><span class="err">$</span> <span class="n">ruby</span> <span class="n">signal_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">^</span><span class="no">CQuitting</span> <span class="n">on</span> <span class="no">INT</span> <span class="n">signal</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">Press</span> <span class="n">ctrl</span> <span class="o">+</span> <span class="p">\</span>
</span><span class='line'><span class="n">mac</span><span class="err">$</span> <span class="n">ruby</span> <span class="n">signal_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="o">^</span><span class="p">\</span><span class="no">Quitting</span> <span class="n">on</span> <span class="no">QUIT</span> <span class="n">signal</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">kill</span> <span class="o">-</span><span class="no">TERM</span> <span class="n">pid</span>
</span><span class='line'><span class="n">mac</span><span class="err">$</span> <span class="n">ruby</span> <span class="n">signal_test</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">U</span> <span class="n">teminated</span> <span class="n">me!</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Trap SIGCHLD信号的例子</h2>

<ul>
<li>sub.rb文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">while</span> <span class="kp">true</span>
</span><span class='line'>   <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>signal_test.rb文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Signal</span><span class="o">.</span><span class="n">trap</span><span class="p">(</span><span class="ss">:CHLD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">print</span> <span class="s2">&quot;Child process is teminated.</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s2">&quot;ruby sub.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">pipe</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="s2">&quot;parent pid: </span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2">, popen return child process pid: </span><span class="si">#{</span><span class="n">pipe</span><span class="o">.</span><span class="n">pid</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s1">&#39;TERM&#39;</span><span class="p">,</span> <span class="n">pipe</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>运行一下命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">parent</span> <span class="ss">pid</span><span class="p">:</span> <span class="mi">3275</span><span class="p">,</span> <span class="n">popen</span> <span class="k">return</span> <span class="n">child</span> <span class="n">process</span> <span class="ss">pid</span><span class="p">:</span> <span class="mi">3276</span>
</span><span class='line'><span class="no">Child</span> <span class="n">process</span> <span class="n">is</span> <span class="n">teminated</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>常用Signal的区别</h2>

<p>SIGTERM和SIGKILL主要的目的就是用来结束一个进程。<br/>
SIGTERM默认会结束一个进程，SIGKILL总是会结束一个进程。<br/>
SIGTERM可以被进程trap，并进行相应处理；SIGKILL无法被trap或者忽略。</p>

<p>SIGINT和SIGQUIT用来处理来自terminal的requests。<br/>
特殊的terminal输入字符可以用来产生这些signal。SIGINT的默认处理和SIGTERM的默认处理相同。<br/>
SIGQUIT的默认处理也同样是结束进程，只是可能会有其他附加的处理，比如生成core dump。这两个信号都可以被trap或者忽略。</p>

<p>SIGHUP是用来处理terminal connection lost的问题，而不是结束一个进程。但是，SIGHUP的默认行为也SIGTERM一样，也是结束进程。</p>

<h6>参考文献</h6>

<p><a href="http://stackoverflow.com/questions/4042201/how-does-sigint-relate-to-the-other-termination-signals">How does termination signals related to each other</a><br/>
<a href="http://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html">Signal header file with detailed description</a><br/>
<a href="http://en.wikipedia.org/wiki/Signal_(computing">List of Unix signal</a>#List_of_signals)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Popen Subprocess]]></title>
    <link href="http://iandai.github.io/blog/2013/11/07/ruby-popen-subprocess/"/>
    <updated>2013-11-07T16:17:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/11/07/ruby-popen-subprocess</id>
    <content type="html"><![CDATA[<p>Ruby有多种方法可以创建subprocess。当需要和subprocess的IO进行交互的时候，Ruby的popen方法是最合适的。</p>

<ul>
<li>sub.rb文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">trap</span><span class="p">(</span><span class="s2">&quot;INT&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">STDERR</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;sub pid </span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2"> Control-C&quot;</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="no">STDOUT</span><span class="o">.</span><span class="n">flush</span>
</span><span class='line'><span class="nb">sleep</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>popen_sub.rb文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">popen</span><span class="p">(</span><span class="s2">&quot;ruby sub.rb&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">pipe</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;parent pid: </span><span class="si">#{</span><span class="vg">$$</span><span class="si">}</span><span class="s2">, popen return (child) pid: </span><span class="si">#{</span><span class="n">pipe</span><span class="o">.</span><span class="n">pid</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">gets</span>      <span class="c1"># pid from child</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;child says it&#39;s pid is: &quot;</span><span class="o">+</span><span class="n">line</span>
</span><span class='line'>  <span class="no">Process</span><span class="o">.</span><span class="n">kill</span> <span class="s1">&#39;INT&#39;</span><span class="p">,</span> <span class="n">pipe</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'>  <span class="n">childs_last_word</span> <span class="o">=</span> <span class="n">pipe</span><span class="o">.</span><span class="n">gets</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">childs_last_word</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;child&#39;s last word: &quot;</span> <span class="o">+</span> <span class="n">childs_last_word</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;child&#39;s exit code: </span><span class="si">#{</span><span class="vg">$?</span><span class="o">.</span><span class="n">exitstatus</span><span class="si">}</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>运行一下命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">mac</span><span class="o">]</span><span class="err">$</span> <span class="n">ruby</span> <span class="n">popen_sub</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="n">parent</span> <span class="ss">pid</span><span class="p">:</span> <span class="mi">3046</span><span class="p">,</span> <span class="n">popen</span> <span class="k">return</span> <span class="p">(</span><span class="n">child</span><span class="p">)</span> <span class="ss">pid</span><span class="p">:</span> <span class="mi">3047</span>
</span><span class='line'><span class="n">child</span> <span class="n">says</span> <span class="n">it</span><span class="s1">&#39;s pid is: 3047</span>
</span><span class='line'><span class="s1">sub pid 3047 Control-C</span>
</span><span class='line'><span class="s1">child&#39;</span><span class="n">s</span> <span class="nb">exit</span> <span class="ss">code</span><span class="p">:</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>


<h6>参考文献</h6>

<p><a href="http://blog.robseaman.com/2008/12/12/sending-ctrl-c-to-a-subprocess-with-ruby">sending ctrl c to a subprocess with ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby文件的读写]]></title>
    <link href="http://iandai.github.io/blog/2013/09/27/ruby-wen-jian-de-du-xie/"/>
    <updated>2013-09-27T23:40:00+09:00</updated>
    <id>http://iandai.github.io/blog/2013/09/27/ruby-wen-jian-de-du-xie</id>
    <content type="html"><![CDATA[<h2>Basic</h2>

<ol>
<li>文件的关闭

<ul>
<li>当使用File.open打开文件的时候，block结束的时候，文件会自动关闭.</li>
</ul>
</li>
<li>File.open and File.new的关系

<ul>
<li>File.new后面不能加block。With no associated block, File.open is a synonym for ::new.</li>
</ul>
</li>
<li>Kernel.open和File.open的区别

<ul>
<li>Kernel.open除了打开文件之外，还可能打开其他内容，比如url。Kernel.open looks at the string to decide what to do with it.</li>
</ul>
</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;.irbrc&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; File</span>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://google.com/&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; StringIO</span>
</span><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;http://google.com/&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Errno::ENOENT: No such file or directory - http://google.com/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>读文件</h2>

<ul>
<li>File的方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">line</span> <span class="p">}</span>      <span class="c1">#=&gt; 最常用方式</span>
</span><span class='line'> <span class="c1">#  IO class&#39;s instance method each_line equals to each.</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file1</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1"># File.new不能添加block。With no associated block, File.open is a synonym for ::new.    </span>
</span><span class='line'><span class="n">file1</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file1</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file2</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">file2</span><span class="o">.</span><span class="n">gets</span>    <span class="c1"># gets input from file, which means read from file</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">line</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">file2</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>IO的方式</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># File.read reads a file completely and returns it as a string.</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">line</span> <span class="p">}</span>
</span><span class='line'> <span class="c1"># Reads the entire file specified by name as individual lines, and returns those lines in an array.</span>
</span><span class='line'><span class="no">IO</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="s2">&quot;test.txt&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">line</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>写文件</h2>

<p>1 常用方式 (preferred approach)</p>

<pre><code>File.open("output.txt", "a+") { |file| file.puts "Hello World!"}   # 自动换行
File.open("output.txt", "a+") { |file| writes "Hello World!\n"}   # 不会自动换行
File.open("output.txt", "a+") { |file| file &lt;&lt; "Hello, world.\n"}   # 不会自动换行 
</code></pre>

<p>2 简单方式，一行写文件
    File.write(&lsquo;output.txt&rsquo;, &lsquo;content&rsquo;)# 会将原来的内容删除，然后写入
    IO.write(&ldquo;output.txt&rdquo;, new_line) # 会将原来的内容删除，然后写入</p>

<p>3 Kernel.open方式</p>

<pre><code>open('myfile.out', 'w') { |f|  f.puts "Hello, world."}
</code></pre>

<p>4 不使用block方式，需要使用ensure来关闭文件</p>

<pre><code>begin 
 file = File.open("/tmp/some_file", "w") 
 file.write("your text") 
rescue IOError =&gt; e #some error occur, dir not writable etc. 
ensure 
 file.close unless file == nil
end
</code></pre>

<h2>将文件清空</h2>

<pre><code> File.truncate("out.txt", 0)   #=&gt; 0
 File.size("out")              #=&gt; 0
</code></pre>

<h6>参考文献</h6>

<p><a href="http://stackoverflow.com/questions/1727217/file-open-open-and-io-foreach-in-ruby-what-is-the-difference">The difference of File.open ,open and IO.foreach in Ruby</a></p>
]]></content>
  </entry>
  
</feed>
