<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | Ian's Tech Note]]></title>
  <link href="http://iandai.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://iandai.github.io/"/>
  <updated>2018-08-01T22:21:36+02:00</updated>
  <id>http://iandai.github.io/</id>
  <author>
    <name><![CDATA[Ian Dai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thoughts on Refactor 一次重构的思考]]></title>
    <link href="http://iandai.github.io/blog/2018/08/01/thoughts-on-re%5B%3F%5D-ci-zhong-gou-de-si-kao/"/>
    <updated>2018-08-01T22:09:29+02:00</updated>
    <id>http://iandai.github.io/blog/2018/08/01/thoughts-on-re[?]-ci-zhong-gou-de-si-kao</id>
    <content type="html"><![CDATA[<p>加入公司的时候，iOS客户端代码比较混乱。<br/>
比如有一些方法非常的长，包含了许多逻辑；许多无用的代码等。<br/>
原来的代码主要是由几个不同的freelancer写成的，所以代码一方面难以理解，一方面也不容易维护和增加新功能。<br/>
所以进行了一次重构。</p>

<h3>重构项目最重要的是什么？</h3>

<p>项目责任人的真正的认可和支持。他需要理解重构需要花费的成本和能够获取的收益。<br/>
重构花费的成本，只能看见不多的业务收益。<br/>
只有项目负责人真正认可，才能在项目没有明显进度的时候，顶住压力，正确制定项目进度计划。<br/>
对开发人员来说，也需要理解这种情况。在重构的时候，尽量能提升构架的同时，也要有业务方面的收益。</p>

<h3>重构的目标</h3>

<p>技术上的目标：有清晰的分层，尽可能解藕，以提高可读性和可扩展性为主；减少逻辑混乱带来的一些bug。<br/>
业务上的目标：优化部分功能；解决语言国际化上的不足；提升对多种设备的多方面支持。<br/>
范围上的目标：全部重写所有逻辑，会耗费非常多的时间。重构抓大放小，主要重构经常访问的模块，如用户登陆模块，Index模块，项目模块。</p>

<h3>重构的步骤</h3>

<p>1，删除不用的图片和代码<br/>
2，解决一部分Warning，比如变量未使用<br/>
3，重新组织文件目录结构<br/>
4，抽象出模块<br/>
5，统一代码规范<br/>
6，修复一个bug或者建立一个新功能，就重构相关的代码，以尽量缩小影响范围</p>

<h3>文件目录结构</h3>

<p>Top layer</p>

<pre><code>-[ProjectName]
    --Features       
    --Categories   
    --Frameworks 
    --Helpers  
    --Utilites    
    --Vendors     
    --Config   
    --Resources     
    --AppEntry 
-Tests
-UITests
-Products         
-Pods
</code></pre>

<p>Second layer</p>

<pre><code>--Features         
    ---Base            
        ----Models      
        ----Views       
        ----Controllers 
        ----Managers      
    ---Login
        ----Models
        ----Views
        ----Controllers
        ----Managers      
    ---Profile
        ----Models
        ----Views
        ----Controllers
        ----Managers      
    ---Home
        ----Models
        ----Views
        ----Controllers
        ----Managers      
</code></pre>

<h3>代码规范</h3>

<p>1, Follow <a href="https://github.com/NYTimes/objective-c-style-guide">NYTimes objective-c style</a><br/>
2, Use <a href="https://github.com/mapbox/XcodeClangFormat">XcodeClangFormat</a> to format source code to unify the source code style.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UITableView Adaption With iPhoneX]]></title>
    <link href="http://iandai.github.io/blog/2018/05/25/uitableview-adaption-with-iphonex/"/>
    <updated>2018-05-25T14:26:28+02:00</updated>
    <id>http://iandai.github.io/blog/2018/05/25/uitableview-adaption-with-iphonex</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>UITableView在iPhoneX上会有20pt/64pt的偏移。<br/>
其原因是由于iOS11废弃了UIViewController的automaticallyAdjustsScrollViewInsets属性，新增了contentInsetAdjustmentBehavior属性。  所以当超出安全区域时系统自动调整了SafeAreaInsets，进而影响了adjustedContentInset，在iOS11中决定tableView内容与边缘距离的是adjustedContentInset，所以需要设置UIScrollView的contentInsetAdjustmentBehavior属性。</p>

<h2>解决方法</h2>

<h3>1.手动适配</h3>

<p>如果你使用了UITableView、UIScrollView，可以直接使用以下代码做适配，这样系统就不会主动为你设置边缘距离，但是你可能需要手动适配UITableView的contenteInset。</p>

<pre><code class="Objc">  #ifdef __IPHONE_11_0  
  // 单独作用与某个tableView
  if ([tableView respondsToSelector:@selector(setContentInsetAdjustmentBehavior:)]) {
    tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
  }
  // 作用与所有的UIScrollView
  UIScrollView.appearance.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
  // 设置view的宽高
  tableView.contentInset = UIEdgeInsetsMake(0, 0, 34, 0);
  #endif
</code></pre>

<h3>2.自动适配</h3>

<p>设置contentInsetAdjustmentBehavior属性为UIScrollViewContentInsetAdjustmentAutomatic，则系统会自动计算contentView的偏移量。</p>

<h3>3.设置安全区域的addtionalSafeAreaInset</h3>

<p>某些情况下，你需要顶部区域，比如广告区域覆盖Status，则可以设置相应页面的addtionalSafeAreaInset属性，这样系统不会将safeArea上调到从status开始。这样可以提供更好的用户体验。<br/>
例如如果你的SafeAreaInset值为(44,0,0,0)，则需要设置相应的additionalSafeAreaInsets值为(-44,0,0,0)。</p>

<pre><code class="Objc">  if (@available(iOS 11.0, *)) {
      self.additionalSafeAreaInsets = UIEdgeInsetsMake(-44, 0, 0, 0);
  } else {
      // Fallback on earlier versions
  }
</code></pre>

<h3>4.自动估算行高</h3>

<p>iOS11开始UITableView开启了自动估算行高，estimatedRowHeight estimatedSectionHeaderHeight estimatedSectionFooterHeight 三个高度估算属性由默认的0变成了UITableViewAutomaticDimension。  所以heightForHeaderInSection和viewForHeaderInSection应该一起使用，不然tableView顶部滑动的时候会有空白。<br/>
在适配过程中发现UITableView会在Header/Footer返回size为负值的情况下会崩溃。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NSString, Unicode和NSCharacterSet]]></title>
    <link href="http://iandai.github.io/blog/2017/01/05/nsstring-unicodehe-nscharacterset/"/>
    <updated>2017-01-05T15:57:17+01:00</updated>
    <id>http://iandai.github.io/blog/2017/01/05/nsstring-unicodehe-nscharacterset</id>
    <content type="html"><![CDATA[<h2>Unicode</h2>

<h3>Convert unicode ponit to eomji using universal character names</h3>

<blockquote><p>Universal character names are formed by a prefix \U followed by an eight-digit Unicode code point, or by a prefix \u followed by a four digit Unicode code point.
For Unicode surrogate pairs, specify the universal character name by using \UNNNNNNNN, where NNNNNNNN is the eight-digit code point for the character. The compiler generates a surrogate pair if required.
In Objc, \U also handles Emoji ZWJ Sequences.</p></blockquote>

<p>For example:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 用Universal character names \U和\u 替换
</span><span class='line'>NSString *str = @&ldquo;The Greek letter Beta looks like this: \u03b2, and the emoji for books looks like this: \U00010437&rdquo;;
</span><span class='line'>NSLog(@&ldquo;%@&rdquo;, str);&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;// 处理 Surrogate Pairs
</span><span class='line'>// 方法一
</span><span class='line'>NSString *str2 = [NSString stringWithCharacters:(unichar[]){0x263A, 0xFE0F} length:2];
</span><span class='line'>NSLog(@"%@", str2);
</span><span class='line'>// 方法二
</span><span class='line'>NSString *str3 = [NSString stringWithFormat:@"\U0000263A\U0000FE0F"];
</span><span class='line'>NSLog(@"%@", str3);
</span><span class='line'>// 方法三
</span><span class='line'>// NSString  initWithBytes
</span><span class='line'>// supports Surrogate Pairs, does not support Emoji ZWJ Sequences
</span><span class='line'>const unichar chars1[] = {0x263A, 0xFE0F};
</span><span class='line'>NSString *str4 = [[NSString alloc] initWithBytes:chars1 length:sizeof(chars1) encoding:NSUTF16LittleEndianStringEncoding];
</span><span class='line'>NSLog(@"%@", str4);
</span><span class='line'>// 方法四
</span><span class='line'>// NSString  initWithBytes
</span><span class='line'>// works on utf32
</span><span class='line'>uint32_t base_point_UTF32 = 0x1F600;
</span><span class='line'>NSString *str5 = [[NSString alloc] initWithBytes:&amp;base_point_UTF32 length:4 encoding:NSUTF32LittleEndianStringEncoding];
</span><span class='line'>NSLog(@"%@", str5);
</span><span class='line'>// 方法五
</span><span class='line'>//CFStringGetSurrogatePairForLongCharacter
</span><span class='line'>UniChar c[2];
</span><span class='line'>CFStringGetSurrogatePairForLongCharacter(0x1F600, c);
</span><span class='line'>NSString *str6 = [[NSString alloc] initWithCharacters:c length:2];
</span><span class='line'>NSLog(@"%@", str6);
</span><span class='line'>
</span><span class='line'>// 处理Emoji ZWJ Sequences
</span><span class='line'>// 方法一
</span><span class='line'>NSString *str7 = [NSString stringWithFormat:@"\U0001F468\U0000200D\U00002695\U0000FE0F"];
</span><span class='line'>NSLog(@"%@", str7);
</span><span class='line'>// 方法二
</span><span class='line'>NSString *str8 = [NSString stringWithFormat:@"👨\u200D👩\u200D👧\u200D👦"]; //👨‍👩‍👧‍👦
</span><span class='line'>NSLog(@"%@", str8);
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>
</span><span class='line'>## CharacterSet
</span><span class='line'>
</span><span class='line'>### 检测CharacterSet包含了哪些字符
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;NSCharacterSet *charSet = [NSCharacterSet symbolCharacterSet];&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;int count = 1;
</span><span class='line'>for (unichar i = 0; i&lt;65535; i++) {
</span><span class='line'>if ([charSet characterIsMember:i]) {
</span><span class='line'>    NSLog(@&ldquo;character %d = %C&rdquo;,i,i);
</span><span class='line'>    count++;
</span><span class='line'>}
</span><span class='line'>}
</span><span class='line'>NSLog(@&ldquo;found %d characters out of 65536&rdquo;,count);</span></code></pre></td></tr></table></div></figure></p>

<h2>More about unicode and emoji</h2>

<p><a href="http://www.unicode.org/faq/emoji_dingbats.html">Emoji and Pictographs</a><br/>
<a href="http://cyrilwei.me/swift/2016/08/31/the-emoji.html">The Emoji, is not what you expected</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何检测和删除NSString中的颜文字Emoji]]></title>
    <link href="http://iandai.github.io/blog/2017/01/05/ru-he-jian-ce-he-shan-chu-nsstringzhong-de-yan-wen-zi-emoji/"/>
    <updated>2017-01-05T14:52:29+01:00</updated>
    <id>http://iandai.github.io/blog/2017/01/05/ru-he-jian-ce-he-shan-chu-nsstringzhong-de-yan-wen-zi-emoji</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>有一个需求是获取联系人姓名的首字母，使用一个或多个首字母绘制联系人用户头像。有的用户名字首字母是颜文字，绘制就会出现乱码。代码如下：</p>

<pre><code class="Objc">NSMutableString *initials = [NSMutableString string];
NSArray *words = [contactName componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
for (NSString *word in words) {
    if (word.length &gt; 0) {
        NSString *firstLetter = [word substringToIndex:1];
        [initials appendString:[firstLetter uppercaseString]];
    }
}
</code></pre>

<p>乱码来自于名字中的颜文字，当<code>[word substringToIndex:1]</code>中的word是颜文字的时候，其返回值并不是一个正常的颜文字。</p>

<p>原因是<code>[word length]</code>结果是2，所以<code>[word substringToIndex:1]</code>其实只返回了颜文字的一半。</p>

<p>为什么会出现这种情况呢？这是因为<code>word</code>是一个NSString类型，而NSString是UTF-16编码的。许多颜文字在使用UTF-16表示的时候，要是用两个字节才能表示，比如😀。</p>

<p>NSString类的<a href="https://developer.apple.com/reference/foundation/nsstring">文档</a>里写到：</p>

<blockquote><p>An NSString object encodes a Unicode-compliant text string, represented as a sequence of UTF–16 code units. All lengths, character
indexes, and ranges are expressed in terms of 16-bit platform-endian values, with index values starting at 0.</p></blockquote>

<h2>解决方法</h2>

<h3>1.从字符串中获得正确完整的字符</h3>

<pre><code class="Objc">__block NSString *firstLetter = @"";
[word enumerateSubstringsInRange:NSMakeRange(0, [word length])
                         options:NSStringEnumerationByComposedCharacterSequences
                      usingBlock: ^(NSString* substring, NSRange substringRange, NSRange enclosingRange, BOOL* stop) {
                          firstLetter = substring;
                          *stop = YES;
                      }];
</code></pre>

<p>使用<code>NSStringEnumerationByComposedCharacterSequences</code>能够读取完整的颜文字，而不是只读取其中一个字节。</p>

<h3>2.检测和删除是否包含颜文字</h3>

<p>Github上有一个比较多人参考的项目<a href="https://github.com/woxtu/NSString-RemoveEmoji">NSString-RemoveEmoj</a>。这个项目有遗漏颜文字，比如⭐，包含了许多不是颜文字的字符，比如Ⅶ。</p>

<p>在unicode.org网站上，有<a href="http://unicode.org/Public/emoji/4.0/emoji-test.txt">完整的颜文字列表</a>。遍历这个完整的列表，就可以检测字符串中是否颜文字。方法如下：</p>

<pre><code class="Objc">// 建立一个emoji CharacterSet
NSMutableCharacterSet *emojiCharacterSet = [[NSMutableCharacterSet alloc] init];
NSString *plistPath = [[NSBundle mainBundle] pathForResource:@"emoji" ofType:@"plist"];
NSArray *emojiArr = [NSArray arrayWithContentsOfFile:plistPath];
for (NSString *emoji in emojiArr) {
    [emojiCharacterSet addCharactersInString:emoji];
}

// - (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)searchSet;
[@"😀" rangeOfCharacterFromSet:set]; 
</code></pre>

<p>上面代码还有一个问题没有被考虑。比如下面这种情况：</p>

<pre><code class="Objc">
NSMutableCharacterSet *set = [[NSMutableCharacterSet alloc] init];
[set addCharactersInString:@"2️⃣"];      // keycap 2, 0032 FE0F 20E3, check from http://www.iemoji.com/view/emoji/296/symbols/keycap-2 
[@"2" rangeOfCharacterFromSet:set];     // return value: YES, which is not reasonable 
</code></pre>

<p>字符2在搜索包含有颜文字2的字符集的时候，会被错误的检测出来。</p>

<p>为了解决这个问题，我写了<a href="https://github.com/iandai/IDEmojiString">IDEmojiString项目</a>。</p>

<h3>3.IDEmojiString</h3>

<p>IDEmojiString通过使单字符和多字符分别搜索字符集，解决了上面的问题。</p>

<p>使用CocoaPods安装之后，通过以下方法使用：
<code>Objc
//#import "IDEmojiManager.h"
IDEmojiManager *manager = [[IDEmojiManager alloc] init];
BOOL containsEmoji = [manager containEmojiInString:@"Some String⭐"];  // return value: YES
NSString *str = [manager removeEmojiFromString:@"Some String⭐"];      // return value: Some String
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Optional in Swift -- 使用Swift Optional的好处]]></title>
    <link href="http://iandai.github.io/blog/2016/08/20/optional-in-swift-shi-yong-swift-optionalde-hao-chu/"/>
    <updated>2016-08-20T16:57:38+02:00</updated>
    <id>http://iandai.github.io/blog/2016/08/20/optional-in-swift-shi-yong-swift-optionalde-hao-chu</id>
    <content type="html"><![CDATA[<p>看这篇文章之前，需要了解Swift中<a href="https://developer.apple.com/library/ios/referencelibrary/GettingStarted/DevelopiOSAppsSwift/Lesson1.html#//apple_ref/doc/uid/TP40015214-CH3-SW1">Optional的基础知识</a>。</p>

<p>作为写了几年的Objective-c的开发者，对在Swift中使用Optional持有过怀疑态度。使用了Optional，需要添加烦人的？和！。使用了？和！之后，依然需要做nil检查；使用了Value！之后，依然会在运行时因为nil问题而crash。</p>

<p>使用Optional有什么意义呢？</p>

<h2>使用理由1: 预先定义好通用的对象不存在的时候的写法</h2>

<p>考虑下面的例子：</p>

<pre><code class="objc">- (NSString *)findStockCode:(NSString *)company {
    if ([company isEqualToString:@"Apple"]) {
        return @"AAPL";
    } else if ([company isEqualToString:@"Google"]) {
        return @"GOOG";
    }

    return nil;
}
</code></pre>

<p>可以使用findStockCode:方法来获取某个上市公司的股票代码。<br/>
也有的开发者会使用下面的方法来写，找不到的时候返回空字符串。</p>

<pre><code class="objc">- (NSString *)findStockCode:(NSString *)company {
    if ([company isEqualToString:@"Apple"]) {
        return @"AAPL";
    } else if ([company isEqualToString:@"Google"]) {
        return @"GOOG";
    }

    return "";
}
</code></pre>

<p>如何确定找不到该公司代码的时候，返回的是空字符串还是nil呢？调用该方法的开发者，需要阅读文档或者处理多种情况。</p>

<pre><code class="objc">NSString *stockCode = [self findStockCode:@"Facebook"]; 
if (stockCode == "" &amp;&amp; stockCode == nil) {
    .....
}
</code></pre>

<p>在Swift中，这种情况非常明显的要使用Optional。如果找不到，则返回nil。</p>

<pre><code class="swift">func findStockCode (company : String) -&gt; String? {
    if (company == "Apple") {
        return "AAPL"
    } else if(company == "Google") {
        return "GOOG"
    }

    return nil
}
</code></pre>

<h2>使用理由2: 编译的时候提示错误</h2>

<pre><code class="objc">- (NSString *)findStockCode:(NSString *)company {
    if ([company isEqualToString:@"Apple"]) {
        return @"AAPL";
    } else if ([company isEqualToString:@"Google"]) {
        return @"GOOG";
    }

    return nil;
}

NSString *stockCode = [self findStockCode:@"Facebook"]; // nil is returned
NSString *text = @"Stock Code - ";
NSString *message = [text stringByAppendingString:stockCode]; // runtime error
NSLog(@"%@", message);
</code></pre>

<p>当用Objective-C的时候，<code>[text stringByAppendingString:stockCode]</code>中，给NSString添加nil的时候，在运行时出错。</p>

<pre><code class="swift">func findStockCode(company: String) -&gt; String? {
   if (company == "Apple") {
      return "AAPL"
   } else if (company == "Google") {
      return "GOOG"
   }

   return nil
}

var stockCode:String? = findStockCode("Facebook")
let text = "Stock Code - "
let message = text + stockCode  // compile-time error
print(message)
</code></pre>

<p>当用Swift的时候，<code>let message = text + stockCode</code>中，Xcode会主动提示stockCode可能会是nil的情况，需要开发者进一步处理。</p>

<h2>使用理由3: 强迫思考nil问题，crash容易发现问题</h2>

<p>上面的Swift代码中，要解决complile-time error，可以用加！来forced unwrapping。</p>

<pre><code class="swift">var stockCode:String? = findStockCode("Facebook")
let text = "Stock Code - "
let message = text + stockCode!  // runtime error
</code></pre>

<p>这段代码可以通过编译，但是在runtime的时候，还是会出错。<br/>
抛出：“fatal error: Can’t unwrap Optional.None”。<br/>
在使用！进行forced unwrapping的时候，开发者被迫思考是要forced unwrapping，还是stockCode有可能是nil。<br/>
这有利于减少犯错的机会。而如果出错了，提示的消息也非常容易找到问题所在。</p>

<h2>使用理由4: 简化nil检查写法(optional chaining)</h2>

<p>考虑这个例子</p>

<pre><code class="swift">class Stock {
    var code: String? 
    var price: Double? 
}

func findStockCode(company: String) -&gt; Stock? {
    if (company == "Apple") {
        let aapl: Stock = Stock()
        aapl.code = "AAPL"
        aapl.price = 90.32

        return aapl
    } else if (company == "Google") {
        let goog: Stock = Stock()
        goog.code = "GOOG"
        goog.price = 556.36

        return goog
    }

    return nil
}

if let sharePrice = findStockCode("Apple")?.price {
    let totalCost = sharePrice * 100
    print(totalCost)
}
</code></pre>

<p>在这段代码中，进行了2次nil检查，一次是判断findStockCode(&ldquo;Apple&rdquo;)是否为nil，一次是判断findStockCode(&ldquo;Apple&rdquo;).price是否为nil。使用optional chaining，可以简化nil检查写法。</p>

<h3>参考文献</h3>

<p><a href="https://www.appcoda.com/beginners-guide-optionals-swift/">A Beginner’s Guide to Optionals in Swift</a><br/>
<a href="http://blog.teamtreehouse.com/understanding-optionals-swift">Understanding Optionals in Swift</a></p>
]]></content>
  </entry>
  
</feed>
