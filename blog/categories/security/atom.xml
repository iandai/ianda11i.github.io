<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Ian's Tech Note]]></title>
  <link href="http://iandai.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://iandai.github.io/"/>
  <updated>2015-08-11T19:25:04+09:00</updated>
  <id>http://iandai.github.io/</id>
  <author>
    <name><![CDATA[Ian Dai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQL Injection]]></title>
    <link href="http://iandai.github.io/blog/2014/05/01/sql-injection/"/>
    <updated>2014-05-01T18:41:00+09:00</updated>
    <id>http://iandai.github.io/blog/2014/05/01/sql-injection</id>
    <content type="html"><![CDATA[<h2>SQL 注入方法</h2>

<ul>
<li><p>SQL 扫描工具<br/>
  sqlmap  <a href="https://github.com/sqlmapproject/sqlmap/wiki/Screenshots">https://github.com/sqlmapproject/sqlmap/wiki/Screenshots</a></p></li>
<li><p>SQL injection方法<br/>
1 ‘ or 1 = 1 —<br/>
2 select * from xxx where a = ‘123;  输入非法内容，看是否有sql error返回。</p></li>
<li><p>利用漏洞<br/>
ereg()有bug，无法检测到\0之后的内容，有可能将注入的内容隐藏在\0的后面。
&#8220;`php
&lt;?php
$a = &ldquo;123\0\0abc&rdquo;;
echo &ldquo;source=[$a]\n&rdquo;;</p></li>
</ul>


<p>$r = preg_match(&ldquo;/123/&rdquo;, $a);
echo &ldquo;match=[$r]\n&rdquo;;
$r = preg_match(&ldquo;/abc/&rdquo;, $a);
echo &ldquo;match=[$r]\n&rdquo;;</p>

<p>$r = ereg(&ldquo;123&rdquo;, $a);
echo &ldquo;match=[$r]\n&rdquo;;
$r = ereg(&ldquo;abc&rdquo;, $a);
echo &ldquo;match=[$r]\n&rdquo;;</p>

<p>/// ereg cannot detect &ldquo;abc&rdquo; after &ldquo;\0&rdquo;, so you must not use raw source string!
/// and you should not use ereg(). instead of it, use preg_match().
&#8220;`</p>

<h2>SQL注入的对策</h2>

<ul>
<li><p>输入<br/>
1 不要信任用户的输入，包括cookie。对用户的输入进行校验。如果是数字，就转化为数字，而不是字符类型的数字。<br/>
2 不要使用动态拼装sql，可以使用参数化的sql或者直接使用存储过程进行数据查询存取。</p></li>
<li><p>权限<br/>
1 不要使用有超级用户或其它有权创建新用户的数据库帐号来连接数据库，攻击者可以在数据库中新建一个超级用户。为每个应用使用单独的权限有限的数据库连接。<br/>
2 删除不再需要的存储过程，例如：master..Xp_cmdshell, xp_startmail, xp_sendmail, sp_makewebtask.</p></li>
<li><p>其他<br/>
1 不要把机密信息直接存放，加密或者hash掉密码和敏感的信息。<br/>
2 应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装。</p></li>
</ul>


<h3>参考链接</h3>

<p><a href="http://www.php.net/manual/zh/security.database.sql-injection.php">PHP官方手册对策</a><br/>
<a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet">OWASP的SQL注入防止CheatSheet</a></p>
]]></content>
  </entry>
  
</feed>
